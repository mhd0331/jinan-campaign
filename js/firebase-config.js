/**
 * ÏßÑÏïàÍµ∞ Î™©Ï°∞Ï†ÑÎßùÎåÄ Î∞òÎåÄ Ï∫†ÌéòÏù∏ Ïï± - Firebase ÏÑ§Ï†ï
 */

// Firebase ÏÑ§Ï†ï (Ïã§Ï†ú Í∞íÏúºÎ°ú ÍµêÏ≤¥ ÌïÑÏöî)
const firebaseConfig = {
    apiKey: "YOUR_API_KEY",
    authDomain: "YOUR_AUTH_DOMAIN",
    projectId: "YOUR_PROJECT_ID",
    storageBucket: "YOUR_STORAGE_BUCKET",
    messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
    appId: "YOUR_APP_ID",
    measurementId: "YOUR_MEASUREMENT_ID"
};

// Firebase ÏÑúÎπÑÏä§ ÌÅ¥ÎûòÏä§
class FirebaseService {
    constructor() {
        this.app = null;
        this.db = null;
        this.auth = null;
        this.storage = null;
        this.messaging = null;
        this.isInitialized = false;
    }

    async initialize() {
        if (this.isInitialized) return;

        try {
            console.log('üî• Firebase Ï¥àÍ∏∞Ìôî ÏãúÏûë...');

            // Firebase Ïï± Ï¥àÍ∏∞Ìôî
            if (!firebase.apps.length) {
                this.app = firebase.initializeApp(firebaseConfig);
            } else {
                this.app = firebase.app();
            }

            // Firestore Ï¥àÍ∏∞Ìôî
            this.db = firebase.firestore();
            
            // Ïò§ÌîÑÎùºÏù∏ ÏßÄÏõê ÌôúÏÑ±Ìôî
            this.db.enablePersistence({ synchronizeTabs: true })
                .catch((err) => {
                    if (err.code === 'failed-precondition') {
                        console.warn('Ïó¨Îü¨ ÌÉ≠Ïù¥ Ïó¥Î†§ÏûàÏñ¥ Ïò§ÌîÑÎùºÏù∏ ÏßÄÏõêÏù¥ Ï†úÌïúÎê©ÎãàÎã§.');
                    } else if (err.code === 'unimplemented') {
                        console.warn('Î∏åÎùºÏö∞Ï†ÄÍ∞Ä Ïò§ÌîÑÎùºÏù∏ ÏßÄÏõêÏùÑ ÌïòÏßÄ ÏïäÏäµÎãàÎã§.');
                    }
                });

            // Authentication Ï¥àÍ∏∞Ìôî
            this.auth = firebase.auth();
            await this.auth.setPersistence(firebase.auth.Auth.Persistence.LOCAL);

            // Storage Ï¥àÍ∏∞Ìôî
            this.storage = firebase.storage();

            // Messaging Ï¥àÍ∏∞Ìôî (HTTPSÏóêÏÑúÎßå)
            if (location.protocol === 'https:' && 'serviceWorker' in navigator) {
                this.messaging = firebase.messaging();
            }

            this.isInitialized = true;
            console.log('‚úÖ Firebase Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');

        } catch (error) {
            console.error('‚ùå Firebase Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', error);
            throw error;
        }
    }

    // ==========================================================================
    // Authentication
    // ==========================================================================

    async signInAnonymously() {
        try {
            const result = await this.auth.signInAnonymously();
            console.log('ÏùµÎ™Ö Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ:', result.user.uid);
            return result.user;
        } catch (error) {
            console.error('ÏùµÎ™Ö Î°úÍ∑∏Ïù∏ Ïã§Ìå®:', error);
            throw error;
        }
    }

    onAuthStateChanged(callback) {
        return this.auth.onAuthStateChanged(callback);
    }

    getCurrentUser() {
        return this.auth.currentUser;
    }

    // ==========================================================================
    // Firestore - Ï∫†ÌéòÏù∏ Îç∞Ïù¥ÌÑ∞
    // ==========================================================================

    async getCampaignData(campaignId) {
        try {
            const doc = await this.db.collection('campaigns').doc(campaignId).get();
            return doc.exists ? { id: doc.id, ...doc.data() } : null;
        } catch (error) {
            console.error('Ï∫†ÌéòÏù∏ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå®:', error);
            throw error;
        }
    }

    // ==========================================================================
    // Firestore - ÏÑúÎ™Ö
    // ==========================================================================

    async submitSignature(signatureData) {
        try {
            // IP Ìï¥Ïãú ÏÉùÏÑ±
            const ipHash = await this.hashString(this.getClientIP());
            
            // Ï§ëÎ≥µ Ï≤¥ÌÅ¨
            const duplicate = await this.checkDuplicateSignature(signatureData.campaignId, ipHash);
            if (duplicate) {
                throw new Error('Ïù¥ÎØ∏ ÏÑúÎ™ÖÏóê Ï∞∏Ïó¨ÌïòÏÖ®ÏäµÎãàÎã§.');
            }

            // ÏÑúÎ™Ö Îç∞Ïù¥ÌÑ∞ Ï§ÄÎπÑ
            const signature = {
                ...signatureData,
                ipHash: ipHash,
                phoneHash: signatureData.phone ? await this.hashString(signatureData.phone) : null,
                timestamp: firebase.firestore.FieldValue.serverTimestamp(),
                verificationStatus: 'pending'
            };

            // Í∞úÏù∏Ï†ïÎ≥¥ Ï†úÍ±∞
            delete signature.phone;
            delete signature.email;

            // FirestoreÏóê Ï†ÄÏû•
            const docRef = await this.db.collection('signatures').add(signature);

            // Ï∫†ÌéòÏù∏ Ïπ¥Ïö¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏
            await this.db.collection('campaigns').doc(signatureData.campaignId).update({
                currentSignatures: firebase.firestore.FieldValue.increment(1)
            });

            console.log('‚úÖ ÏÑúÎ™Ö Ï†úÏ∂ú ÏÑ±Í≥µ:', docRef.id);
            return docRef.id;

        } catch (error) {
            console.error('‚ùå ÏÑúÎ™Ö Ï†úÏ∂ú Ïã§Ìå®:', error);
            throw error;
        }
    }

    async checkDuplicateSignature(campaignId, ipHash) {
        const query = this.db.collection('signatures')
            .where('campaignId', '==', campaignId)
            .where('ipHash', '==', ipHash)
            .limit(1);

        const snapshot = await query.get();
        return !snapshot.empty;
    }

    onSignatureCountChange(campaignId, callback) {
        return this.db.collection('campaigns').doc(campaignId)
            .onSnapshot((doc) => {
                if (doc.exists) {
                    callback(doc.data().currentSignatures || 0);
                }
            });
    }

    // ==========================================================================
    // Firestore - Í≤åÏãúÍ∏Ä
    // ==========================================================================

    async createPost(postData) {
        try {
            const post = {
                ...postData,
                authorId: this.getCurrentUser()?.uid || 'anonymous',
                createdAt: firebase.firestore.FieldValue.serverTimestamp(),
                updatedAt: firebase.firestore.FieldValue.serverTimestamp(),
                reactions: { like: 0, love: 0, angry: 0, sad: 0 },
                viewCount: 0,
                commentCount: 0,
                isActive: true
            };

            const docRef = await this.db.collection('posts').add(post);
            console.log('‚úÖ Í≤åÏãúÍ∏Ä ÏûëÏÑ± ÏÑ±Í≥µ:', docRef.id);
            return docRef.id;

        } catch (error) {
            console.error('‚ùå Í≤åÏãúÍ∏Ä ÏûëÏÑ± Ïã§Ìå®:', error);
            throw error;
        }
    }

    async getPosts(category = null, limit = 20) {
        let query = this.db.collection('posts')
            .where('isActive', '==', true)
            .orderBy('createdAt', 'desc');

        if (category && category !== 'Ï†ÑÏ≤¥') {
            query = query.where('category', '==', category);
        }

        query = query.limit(limit);

        const snapshot = await query.get();
        return snapshot.docs.map(doc => ({
            id: doc.id,
            ...doc.data()
        }));
    }

    onPostsChange(category, callback) {
        let query = this.db.collection('posts')
            .where('isActive', '==', true)
            .orderBy('createdAt', 'desc');

        if (category && category !== 'Ï†ÑÏ≤¥') {
            query = query.where('category', '==', category);
        }

        return query.onSnapshot((snapshot) => {
            const posts = snapshot.docs.map(doc => ({
                id: doc.id,
                ...doc.data()
            }));
            callback(posts);
        });
    }

    // ==========================================================================
    // Firestore - Ìà¨Ìëú
    // ==========================================================================

    async submitVote(pollId, selectedOptions) {
        try {
            const userId = this.getCurrentUser()?.uid || this.getAnonymousId();
            
            // Ï§ëÎ≥µ Ìà¨Ìëú Ï≤¥ÌÅ¨
            const existingVote = await this.db.collection('poll_votes')
                .where('pollId', '==', pollId)
                .where('userId', '==', userId)
                .get();

            if (!existingVote.empty) {
                throw new Error('Ïù¥ÎØ∏ Ìà¨ÌëúÏóê Ï∞∏Ïó¨ÌïòÏÖ®ÏäµÎãàÎã§.');
            }

            // Ìà¨Ìëú Ï†ÄÏû•
            await this.db.collection('poll_votes').add({
                pollId: pollId,
                userId: userId,
                selectedOptions: selectedOptions,
                timestamp: firebase.firestore.FieldValue.serverTimestamp()
            });

            // Ìà¨Ìëú Ïàò ÏóÖÎç∞Ïù¥Ìä∏
            const pollRef = this.db.collection('polls').doc(pollId);
            const batch = this.db.batch();

            selectedOptions.forEach(optionId => {
                batch.update(pollRef, {
                    [`options.${optionId}.votes`]: firebase.firestore.FieldValue.increment(1),
                    totalVotes: firebase.firestore.FieldValue.increment(1)
                });
            });

            await batch.commit();
            console.log('‚úÖ Ìà¨Ìëú Ï†úÏ∂ú ÏÑ±Í≥µ');

        } catch (error) {
            console.error('‚ùå Ìà¨Ìëú Ï†úÏ∂ú Ïã§Ìå®:', error);
            throw error;
        }
    }

    // ==========================================================================
    // Storage
    // ==========================================================================

    async uploadImage(file, folder = 'images') {
        try {
            const fileName = `${folder}/${Date.now()}_${file.name}`;
            const storageRef = this.storage.ref().child(fileName);
            const snapshot = await storageRef.put(file);
            const downloadURL = await snapshot.ref.getDownloadURL();
            
            console.log('‚úÖ Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú ÏÑ±Í≥µ:', downloadURL);
            return downloadURL;

        } catch (error) {
            console.error('‚ùå Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú Ïã§Ìå®:', error);
            throw error;
        }
    }

    // ==========================================================================
    // Utilities
    // ==========================================================================

    async hashString(str) {
        const encoder = new TextEncoder();
        const data = encoder.encode(str);
        const hashBuffer = await crypto.subtle.digest('SHA-256', data);
        const hashArray = Array.from(new Uint8Array(hashBuffer));
        return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
    }

    getClientIP() {
        // Ïã§Ï†ú Íµ¨ÌòÑÏóêÏÑúÎäî ÏÑúÎ≤Ñ APIÎ•º ÌÜµÌï¥ IPÎ•º Í∞ÄÏ†∏ÏôÄÏïº Ìï®
        return '127.0.0.1';
    }

    getAnonymousId() {
        let anonymousId = localStorage.getItem('anonymous_id');
        if (!anonymousId) {
            anonymousId = 'anon_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            localStorage.setItem('anonymous_id', anonymousId);
        }
        return anonymousId;
    }
}

// ==========================================================================
// Firestore Security Rules (Ï∞∏Í≥†Ïö©)
// ==========================================================================

const FIRESTORE_RULES = `
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Ï∫†ÌéòÏù∏ Ï†ïÎ≥¥ (ÏùΩÍ∏∞ Ï†ÑÏö©)
    match /campaigns/{campaignId} {
      allow read: if true;
      allow write: if false;
    }
    
    // ÏÑúÎ™Ö Îç∞Ïù¥ÌÑ∞ (ÏÉùÏÑ±Îßå ÌóàÏö©)
    match /signatures/{signatureId} {
      allow create: if request.resource.data.keys().hasAll(['name', 'region', 'campaignId']) &&
                      request.resource.data.name is string &&
                      request.resource.data.region is string;
      allow read: if resource.data.isPublic == true;
      allow update, delete: if false;
    }
    
    // ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Í≤åÏãúÍ∏Ä
    match /posts/{postId} {
      allow read: if resource.data.isActive == true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
                      (request.auth.uid == resource.data.authorId || 
                       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isModerator == true);
      allow delete: if false;
    }
    
    // Ìà¨Ìëú
    match /poll_votes/{voteId} {
      allow create: if request.auth != null;
      allow read: if false;
      allow update, delete: if false;
    }
  }
}
`;

// Ï†ÑÏó≠ ÏÑúÎπÑÏä§ Ïù∏Ïä§ÌÑ¥Ïä§
const firebaseService = new FirebaseService();

// Ïï± Î°úÎìúÏãú ÏûêÎèô Ï¥àÍ∏∞Ìôî
document.addEventListener('DOMContentLoaded', async () => {
    try {
        await firebaseService.initialize();
        
        // ÏùµÎ™Ö Î°úÍ∑∏Ïù∏
        if (!firebaseService.getCurrentUser()) {
            await firebaseService.signInAnonymously();
        }
        
        console.log('üöÄ Firebase ÏÑúÎπÑÏä§ Ï§ÄÎπÑ ÏôÑÎ£å');
    } catch (error) {
        console.error('‚ùå Firebase ÏÑúÎπÑÏä§ Ï¥àÍ∏∞Ìôî Ïã§Ìå®:', error);
    }
});

// Ï†ÑÏó≠ Ï†ëÍ∑ºÏùÑ ÏúÑÌï¥ windowÏóê Ï∂îÍ∞Ä
window.firebaseService = firebaseService;